{
  ".1_router_setup": {
    "prefix": ";rerouter_setup\r",
    "description": "1.router_setup\r",
    "body": [
      "\r",
      "import React from \"react\"\r",
      "// 準備\r",
      "// npm i react-router-dom @types/react-router-dom\r",
      "import { BrowserRouter, Route, Switch } from \"react-router-dom\"\r",
      "const dummy = (\r",
      "  <BrowserRouter>\r",
      "    <Switch>\r",
      "      <Route exact path=\"/\" render={() => <div>hello</div>} />\r",
      "    </Switch>\r",
      "  </BrowserRouter>\r",
      ")\r",
      "// <Route exact path=\"/\" component={hello}/>\r",
      ""
    ]
  },
  ".2_redux_setup_1_App": {
    "prefix": ";reredux_setup_1_App\r",
    "description": "2.redux_setup_1_App\r",
    "body": [
      "\r",
      "\r",
      "\r",
      "\r",
      "// 準備\r",
      "// npm i react-redux @types/react-redux\r",
      "// npm i redux history connected-react-router\r",
      "// code ./src/store/index.ts\r",
      "// code ./src/reducers/index.ts\r",
      "\r",
      "import { Provider } from \"react-redux\"\r",
      "import { ConnectedRouter } from \"connected-react-router\"\r",
      "import configureStore, { history } from \"./store\"\r",
      "\r",
      "const store = configureStore()\r",
      "\r",
      "const dummy = (\r",
      "  <Provider store={store}>\r",
      "    <ConnectedRouter history={history}>\r",
      "      {/* Provider>Router>Switch>Route\r",
      "      <BrowserRouter>→これは削除\r",
      "        <Switch>\r",
      "          <Route exact path='/' render={() => (<div>hello</div>)} />\r",
      "          <Route render={() => (<div>invalid path</div>)} />\r",
      "        </Switch>\r",
      "      </BrowserRouter>\r",
      "      */}\r",
      "    </ConnectedRouter>\r",
      "  </Provider>\r",
      ")\r",
      ""
    ]
  },
  ".2_redux_setup_2_store": {
    "prefix": ";reredux_setup_2_store\r",
    "description": "2.redux_setup_2_store\r",
    "body": [
      "\r",
      "// #region import\r",
      "import { applyMiddleware, createStore, compose } from \"redux\"\r",
      "import { createBrowserHistory, History } from \"history\"\r",
      "import { routerMiddleware } from \"connected-react-router\"\r",
      "import createRootReducer from \"../reducers\"\r",
      "// #endregion\r",
      "\r",
      "// #region createBrowserHistory\r",
      "export const history: History = createBrowserHistory()\r",
      "// #endregion\r",
      "\r",
      "// #region composeEnhancers\r",
      "interface ExtendedWindow extends Window {\r",
      "  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r",
      "}\r",
      "declare var window: ExtendedWindow\r",
      "const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r",
      "// #endregion\r",
      "\r",
      "export default function configureStore<T>(preloadedState?: T) {\r",
      "  const store = createStore(\r",
      "    createRootReducer(history), // root reducer with router state\r",
      "    preloadedState, // initialState\r",
      "    composeEnhancers(\r",
      "      applyMiddleware(\r",
      "        routerMiddleware(history) // for dispatching history actions\r",
      "        // ... other middlewares ...\r",
      "      )\r",
      "    )\r",
      "  )\r",
      "  return store\r",
      "}\r",
      ""
    ]
  },
  ".2_redux_setup_3_reducer": {
    "prefix": ";reredux_setup_3_reducer\r",
    "description": "2.redux_setup_3_reducer\r",
    "body": [
      "\r",
      "\r",
      "import { combineReducers } from \"redux\"\r",
      "import { connectRouter } from \"connected-react-router\"\r",
      "// import helloReducer from './hello.ts'\r",
      "import { History } from \"history\"\r",
      "\r",
      "const createRootReducer = (history: History) =>\r",
      "  combineReducers({\r",
      "    router: connectRouter(history),\r",
      "    // hello: helloReducer,\r",
      "  })\r",
      "\r",
      "export default createRootReducer\r",
      ""
    ]
  },
  ".3_skelton_1_App": {
    "prefix": ";reskelton_1_App",
    "body": "// prepare\r\n// code src/dev/DummyPage.tsx\r\n// > rcc\r\nimport DummyPage from './dev/DummyPage'\r\nimport HomePage from './pages/Home/HomePage'\r\n\r\nconst dummy = (\r\n  <>\r\n    <Switch>\r\n      <Route exact path=\"/login\" component={DummyPage} />\r\n    </Switch>\r\n    <Switch>\r\n      <Route exact path=\"/register\" component={DummyPage} />\r\n    </Switch>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={DummyPage} />\r\n    </Switch>\r\n    <Switch>\r\n      <Route exact path=\"/home\" component={HomePage} />\r\n    </Switch>\r\n    <Switch>\r\n      <Route exact path=\"/profile\" component={DummyPage} />\r\n    </Switch>\r\n  </>\r\n)\r\n",
    "description": "skelton_1_App"
  },
  ".3_skelton_2_api_SimpleFetch": {
    "prefix": ";reskelton_2_api_SimpleFetch",
    "body": "export default async (data: any) => {\r\n  return data\r\n}\r\n\r\n// TODO: export default\r\nconst SimpleFetch = async (query: any) => {\r\n  try {\r\n    const data = await fetch('http://dev.anchor.id/graphql', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        query: query.query,\r\n        variables: query.variables,\r\n      }),\r\n    })\r\n    const json = await data.json()\r\n    return json.data\r\n  } catch (error) {\r\n    // TODO\r\n    console.error('network error')\r\n  }\r\n}\r\n",
    "description": "skelton_2_api_SimpleFetch"
  },
  ".3_skelton_3_api_queries": {
    "prefix": ";reskelton_3_api_queries\r",
    "description": "skelton_3_api_queries\r",
    "body": [
      "\r",
      "export const getUser = (userId: number) => {\r",
      "  const user = {\r",
      "    id: userId,\r",
      "    name: `loginUser${userId}`\r",
      "  }\r",
      "  return user\r",
      "}\r",
      "\r",
      "export const REALgetUser = (userId: number) => {\r",
      "  return {\r",
      "    query: `query ($userId: ID!) {\r",
      "      user(id: $userId) {\r",
      "        id\r",
      "        name\r",
      "      }\r",
      "    }\r",
      "    `,\r",
      "    variables: {\r",
      "      userId\r",
      "    }\r",
      "  }\r",
      "}\r",
      ""
    ]
  },
  ".3_skelton_4_HomePage": {
    "prefix": ";reskelton_4_HomePage\r",
    "description": "skelton_4_HomePage\r",
    "body": [
      "\r",
      "//prepare\r",
      "//code ./src/pages/Home/HomePage.tsx\r",
      "//code ./src/api/SimpleFetch.ts\r",
      "//code ./src/api/queries.tsx\r",
      "// rcc拡張\r",
      "// state/cdm/handler/renderが入っている\r",
      "import React from \"react\"\r",
      "import SimpleFetch from \"../../api/SimpleFetch\"\r",
      "import { getUser } from \"../../api/queries\"\r",
      "\r",
      "export default class HomePage extends Component {\r",
      "  // #region state\r",
      "  // TODO: local stateをglobal stateに昇格\r",
      "  state: any = {\r",
      "    user: {}\r",
      "  }\r",
      "  // #endregion\r",
      "\r",
      "  // #region componentDidMount\r",
      "  async componentDidMount() {\r",
      "    const user = await SimpleFetch(getUser(1))\r",
      "    this.setState({ user })\r",
      "  }\r",
      "  // #endregion\r",
      "\r",
      "  // #region handler\r",
      "  handleClickPopUser = () => {\r",
      "    // TODO\r",
      "    const { user } = this.state\r",
      "    window.alert(`my name is ${user.name}`)\r",
      "  }\r",
      "  // #endregion\r",
      "\r",
      "  // #region render\r",
      "  render() {\r",
      "    return (\r",
      "      <div>\r",
      "        <button onClick={this.handleClickPopUser}>私のユーザー名は?</button>\r",
      "      </div>\r",
      "    )\r",
      "  }\r",
      "  // #endregion\r",
      "}\r",
      ""
    ]
  },
  "rfc_obj&onclick": {
    "prefix": ";rfc_obj&onclick\r",
    "description": "pageから使用する、onClickに引数をわたせるfunctional component\r",
    "body": [
      "\r",
      "import React from \"react\"\r",
      "\r",
      "// 処理をもらって、その処理に渡すものをここで制御できる。(アローでかく)\r",
      "// 当然、定義元はそのように書いている\r",
      "// handleClick = (objId: any) => {}\r",
      "export default ({ obj, onClick }: any) => {\r",
      "  return (\r",
      "    <div\r",
      "      onClick={() => {\r",
      "        // これも可能(引数の定義には注意)\r",
      "        // (e: any)=>{onClick(obj.id, e)}\r",
      "        onClick(obj.id)\r",
      "      }}\r",
      "    >\r",
      "      {obj.name}\r",
      "    </div>\r",
      "  )\r",
      "}\r",
      ""
    ]
  },
  "_robj": {
    "prefix": ";_robj\r",
    "description": "objはstate/cdm/handler/renderに書く\r",
    "body": [
      "\r",
      "\r",
      "// 1.state\r",
      "obj: {},\r",
      "// objs: [],\r",
      "\r",
      "// 2.cdm\r",
      "const obj = await SimpleFetch(getObj(1))\r",
      "this.setState({ obj })\r",
      "    \r",
      "// 4.handler\r",
      "handleClick = (obj: any) => {\r",
      "  const selectedObj = obj\r",
      "  this.setState({ selectedObj })\r",
      "}\r",
      "\r",
      "// 3.render\r",
      "const {obj} = this.state\r",
      ""
    ]
  },
  "_rlocal_var": {
    "prefix": ";rlocal_var\r",
    "description": "変更しない変数はstateの下に定義\r",
    "body": [
      "\r",
      "class A {\r",
      "  // stateの下\r",
      "  // Stateパターンに応用できる→currentTabをstateで持つ\r",
      "  tabs: any[] = [\r",
      "    {\r",
      "      id: 1,\r",
      "      name: \"memo\"\r",
      "    },\r",
      "    {\r",
      "      id: 2,\r",
      "      name: \"1:1\"\r",
      "    },\r",
      "    {\r",
      "      id: 3,\r",
      "      name: \"codepen\"\r",
      "    }\r",
      "  ]\r",
      "}\r",
      ""
    ]
  },
  "_rstyle_flex": {
    "prefix": ";rstyle_flex",
    "description": "flex",
    "body": [
      "<div style={{ display: \"flex\" }}></div>\r"
    ]
  },
  "_rstyle_flex_right_bar": {
    "prefix": "_rstyle_flex_right_bar\r",
    "description": "flex right bar",
    "body": [
      "<div\r",
      "  style={{\r",
      "    position: \"fixed\",\r",
      "    top: 0,\r",
      "    right: 0,\r",
      "    display: \"flex\",\r",
      "    flexFlow: \"column\"\r",
      "  }}>\r",
      "  <button>+</button>\r",
      "  <button>?</button>\r",
      "</div>\r"
    ]
  },
  ".4_modal_1_HomePage": {
    "prefix": ";remodal_1_HomePage\r",
    "description": "modal_1_HomePage\r",
    "body": [
      "\r",
      "// prepare\r",
      "// code ./src/containers/Modal.tsx\r",
      "// code ./src/reducers/modal.ts\r",
      "// code ./src/reducers/index.ts\r",
      "import { openModal } from \"../../reducers/modal\"\r",
      "\r",
      "type Props = {\r",
      "  openModal: Function\r",
      "}\r",
      "class HomePage extends Component<Props> {\r",
      "  handleSetData = () => {\r",
      "    this.props.openModal()\r",
      "  }\r",
      "}\r",
      "\r",
      "const mapStateToProps = (state: any) => ({})\r",
      "\r",
      "const mapDispatchToProps = {\r",
      "  openModal\r",
      "}\r",
      ""
    ]
  },
  ".4_modal_2_containers_Modal": {
    "prefix": ";remodal_2_containers_Modal\r",
    "description": "modal_2_containers_Modal\r",
    "body": [
      "\r",
      "// #region import\r",
      "import React, { Component } from \"react\"\r",
      "import { connect } from \"react-redux\"\r",
      "import { closeModal } from \"../reducers/modal\"\r",
      "// #endregion\r",
      "\r",
      "// #region layout class\r",
      "type Props = {\r",
      "  modal: any\r",
      "  closeModal: Function\r",
      "}\r",
      "\r",
      "class Modal extends Component<Props> {\r",
      "  handleClose = () => {\r",
      "    this.props.closeModal()\r",
      "  }\r",
      "\r",
      "  render() {\r",
      "    const { isShow } = this.props.modal\r",
      "\r",
      "    if (!isShow) {\r",
      "      return null\r",
      "    }\r",
      "\r",
      "    return (\r",
      "      <div>\r",
      "        <div\r",
      "          style={{\r",
      "            position: \"fixed\",\r",
      "            top: 0,\r",
      "            bottom: 0,\r",
      "            left: 0,\r",
      "            right: 0,\r",
      "            backgroundColor: \"black\",\r",
      "            opacity: 0.6\r",
      "          }}\r",
      "        />\r",
      "        <div\r",
      "          style={{\r",
      "            position: \"fixed\",\r",
      "            top: 20,\r",
      "            left: 0,\r",
      "            right: 0,\r",
      "            display: \"flex\",\r",
      "            justifyContent: \"center\"\r",
      "          }}\r",
      "        >\r",
      "          <div\r",
      "            className=\"p20\"\r",
      "            style={{\r",
      "              width: \"60%\",\r",
      "              height: 300,\r",
      "              backgroundColor: \"white\",\r",
      "              borderRadius: 8\r",
      "            }}\r",
      "          >\r",
      "            <div className=\"m20\">this is modal</div>\r",
      "            <div className=\"align-center\">\r",
      "              <button onClick={this.handleClose}>close</button>\r",
      "            </div>\r",
      "          </div>\r",
      "        </div>\r",
      "      </div>\r",
      "    )\r",
      "  }\r",
      "}\r",
      "// #endregion\r",
      "\r",
      "// #region container\r",
      "const mapStateToProps = (state: any) => ({\r",
      "  // file://reducers/modal.ts\r",
      "  // * action\r",
      "  // export const openModal = (Modal: any) => { return { type: OPEN_MODAL, payload: { Modal } } }\r",
      "  // * reducer\r",
      "  // return { ...state, isShow: true, Modal: action.payload.Modal }\r",
      "  //  file://reducers/index.ts\r",
      "  // modal,\r",
      "  // → state.modal = {isShow: true, Modal: action.payload.Modal }\r",
      "  modal: state.modal\r",
      "})\r",
      "\r",
      "const mapDispatchToProps = {\r",
      "  closeModal\r",
      "}\r",
      "\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(Modal)\r",
      "// #endregion\r",
      ""
    ]
  },
  ".4_modal_3_reducers/modal": {
    "prefix": ";modal_3_reducers/modal\r",
    "description": "modal_3_reducers/modal\r",
    "body": [
      "\r",
      "// #region constant\r",
      "const OPEN_MODAL = \"OPEN_MODAL\"\r",
      "const CLOSE_MODAL = \"CLOSE_MODAL\"\r",
      "// #endregion\r",
      "\r",
      "// #region actions\r",
      "export const openModal = () => {\r",
      "  return { type: \"OPEN_MODAL\" }\r",
      "}\r",
      "export const closeModal = () => {\r",
      "  return { type: \"CLOSE_MODAL\" }\r",
      "}\r",
      "// #endregion\r",
      "\r",
      "// #region reducer\r",
      "const initialState: { isShow: boolean } = {\r",
      "  isShow: false\r",
      "}\r",
      "export default (state = initialState, action: any) => {\r",
      "  switch (action.type) {\r",
      "    case OPEN_MODAL:\r",
      "      return { ...state, isShow: true }\r",
      "    case CLOSE_MODAL:\r",
      "      return { ...state, isShow: false }\r",
      "    default:\r",
      "      return state\r",
      "  }\r",
      "}\r",
      "// #endregion\r",
      ""
    ]
  },
  ".4_modal_4_reducers_index": {
    "prefix": ";remodal_4_reducers_index\r",
    "description": "modal_4_reducers/index\r",
    "body": [
      "\r",
      "import modal from \"./modal\"\r",
      "modal\r",
      ""
    ]
  },
  ".4_modal_5_App": {
    "prefix": ";remodal_5_App\r",
    "description": "modal_5_App\r",
    "body": [
      "\r",
      "import Modal from \"./containers/Modal\"\r",
      "\r",
      "<Modal />\r",
      ""
    ]
  },
  "_reduxconnect": {
    "prefix": ";reduxconnect\r",
    "description": "",
    "body": [
      "\r",
      "type Props = {\r",
      "  openModal: Function\r",
      "}\r",
      "// extends Component<Props>\r",
      "const mapStateToProps = (state: any) => ({})\r",
      "const mapDispatchToProps = {\r",
      "  openModal\r",
      "}\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(HomePage)\r",
      ""
    ]
  },
  "_reduxSaveToStore_page": {
    "prefix": ";reduxSaveToStore_page\r",
    "description": "",
    "body": [
      "\r",
      "// prepare\r",
      "// code ./src/utils/createVariantReducer\r",
      "import { saveToStore } from \"../../utils/createVariantReducer\"\r",
      "\r",
      "type Props = {\r",
      "  category: any\r",
      "  saveToStore: Function\r",
      "}\r",
      "\r",
      "handleClickCategory = (selectedCategory: any) => {\r",
      "  this.props.saveToStore(\"category\", \"category\", selectedCategory)\r",
      "}\r",
      "\r",
      "const mapDispatchToProps = {\r",
      "  saveToStore\r",
      "}\r",
      ""
    ]
  },
  "_reduxSaveToStore_utils1": {
    "prefix": ";reduxSaveToStore_utils1\r",
    "description": "",
    "body": [
      "\r",
      "const initialState: any = {}\r",
      "/**\r",
      " * targetを受け取り、action.targetをもつ、reducerを生成\r",
      " * e.g.) target: 'user'\r",
      " */\r",
      "export default (target: string) => {\r",
      "  return (state = initialState, action: any) => {\r",
      "    if (target !== action.target) {\r",
      "      return state\r",
      "    }\r",
      "\r",
      "    switch (action.type) {\r",
      "      case \"SAVE_TO_STORE\": {\r",
      "        const { key, value } = action.payload\r",
      "        return { ...state, [key]: value }\r",
      "      }\r",
      "    }\r",
      "    return state\r",
      "  }\r",
      "}\r",
      "\r",
      "// action creator\r",
      "export const saveToStore = (target: string, key: string, value: any) => {\r",
      "  return { type: \"SAVE_TO_STORE\", target, payload: { key, value } }\r",
      "}\r",
      ""
    ]
  },
  "_reactselect": {
    "prefix": ";reselect\r",
    "description": "",
    "body": [
      "\r",
      "import Select from \"react-select\"\r",
      "\r",
      "const valueOptions = [\r",
      "  {\r",
      "    id: 1,\r",
      "    value: \"react\",\r",
      "    label: \"React\"\r",
      "  },\r",
      "  {\r",
      "    id: 2,\r",
      "    value: \"vue\",\r",
      "    label: \"Vue.js\"\r",
      "  }\r",
      "]\r",
      "\r",
      "const handlerClick = (selectedV: any) => {\r",
      "  // stateとして保存\r",
      "}\r",
      "\r",
      "const render = () => {\r",
      "  ;<Select\r",
      "    value={selectedValue}\r",
      "    onChange={this.handleClick}\r",
      "    options={valueOptions}\r",
      "  />\r",
      "}\r",
      ""
    ]
  },
  "_reactPage": {
    "prefix": ";reduxpage\r",
    "description": "connect付skeltonPage\r",
    "body": [
      "\r",
      "//prepare\r",
      "// rcc拡張\r",
      "// state/cdm/handler/renderが入っている(connect版)\r",
      "import React, { Component } from \"react\"\r",
      "import { connect } from \"react-redux\"\r",
      "// import SimpleFetch from \"../../api/SimpleFetch\"\r",
      "// import { getUser } from \"../../api/queries\"\r",
      "\r",
      "type Props = {\r",
      "  //openModal: Function\r",
      "}\r",
      "class InputEmailPage extends Component<Props> {\r",
      "  // #region state\r",
      "  // TODO: local stateをglobal stateに昇格\r",
      "  state: any = {\r",
      "    user: {}\r",
      "  }\r",
      "  // #endregion\r",
      "\r",
      "  // #region componentDidMount\r",
      "  async componentDidMount() {\r",
      "    // const user = await SimpleFetch(getUser(1))\r",
      "    // this.setState({ user })\r",
      "  }\r",
      "  // #endregion\r",
      "\r",
      "  // #region handler\r",
      "  handleClickPopUser = () => {\r",
      "    // TODO\r",
      "    const { user } = this.state\r",
      "    window.alert(`my name is ${user.name}`)\r",
      "  }\r",
      "  // #endregion\r",
      "\r",
      "  // #region render\r",
      "  render() {\r",
      "    return (\r",
      "      <div>\r",
      "        <button onClick={this.handleClickPopUser}>私のユーザー名は?</button>\r",
      "      </div>\r",
      "    )\r",
      "  }\r",
      "  // #endregion\r",
      "}\r",
      "\r",
      "const mapStateToProps = (state: any) => ({})\r",
      "\r",
      "const mapDispatchToProps = {\r",
      "  //openModal,\r",
      "}\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(InputEmailPage)\r",
      ""
    ]
  },
  "_reactFormSubmit": {
    "prefix": ";reFormSubmit\r",
    "description": "",
    "body": [
      "\r",
      "\r",
      "import React, {Component} from 'react'\r",
      "type Props{}\r",
      "export default class Form1 extends Component<Props>{\r",
      "  props: any\r",
      "  handleChangeEmail = (e: any) => {\r",
      "    const { value } = e.target\r",
      "    this.props.updatePage('email', value)\r",
      "  }\r",
      "  handleSubmit = (e: any) => {\r",
      "  this.handleClickSendEmail(e)\r",
      "}\r",
      "  handleClickSendEmail = (e: any) => {\r",
      "    e.preventDefault()\r",
      "    this.props.history.push('/sign-up/sent-email')\r",
      "  }\r",
      "  \r",
      "  //formのメリット: Enter押下時のイベントが簡単に拾えること\r",
      "  render(){\r",
      "  <form className=\"mh24 align-left\" onSubmit={this.handleSubmit}>\r",
      "    <label htmlFor=\"inputEmail\">メールアドレス</label>\r",
      "    <div className=\"mb20\">\r",
      "      <input\r",
      "        id=\"inputEmail\"\r",
      "        type=\"text\"\r",
      "        placeholder=\"user@snip.jp\"\r",
      "        value={email}\r",
      "        onChange={this.handleChangeEmail}\r",
      "        style={{ width: '100%', boxSizing: 'border-box' }}\r",
      "      />\r",
      "    </div>\r",
      "  </form>\r",
      "}\r",
      "\r",
      "}\r",
      ""
    ]
  },
  "_jsarray_renban1..10": {
    "prefix": ";jsarrayrenban1..10\r",
    "description": "js連番\r",
    "body": [
      "\r",
      "\r",
      ";[...Array(10)].map((e, i) => {\r",
      "  return i\r",
      "})\r",
      ""
    ]
  },
  ".5_modalUse_1_reduces_modal": {
    "prefix": ";modalUsing_1_reduces_modal\r",
    "description": "modalに流し込み\r",
    "body": [
      "\r",
      "// prepare\r",
      "// code ./pages/XXX/comonents/SetModal.tsx\r",
      "\r",
      "// memo\r",
      "// openModal(SetXXXModal)とやって流し込んでモーダルの中で表示させる。\r",
      "// action creator\r",
      "// `const openModal = (Modal: any) => { return { type: \"OPEN_MODAL\", payload: { Modal } }}`\r",
      "// reducer\r",
      "// `case \"OPEN_MODAL\": return { Modal: action.payload.Modal }`\r",
      "\r",
      "// #region action creator\r",
      "const openModal = (Modal: any) => {\r",
      "  return { type: \"OPEN_MODAL\", payload: { Modal } }\r",
      "}\r",
      "// #endregion\r",
      "// #region reducer\r",
      "const initialState: { Modal: any } = {\r",
      "  Modal: {}\r",
      "}\r",
      "export default (state = initialState, action: any) => {\r",
      "  switch (action.type) {\r",
      "    case \"OPEN_MODAL\":\r",
      "      return { Modal: action.payload.Modal }\r",
      "    default:\r",
      "      return state\r",
      "  }\r",
      "}\r",
      "// #endregion\r",
      ""
    ]
  },
  ".5_modalUse_2_SetXXXModal": {
    "prefix": ".5_modalUse_2_SetXXXModal\r",
    "description": "SetXXXModal作成\r",
    "body": [
      "\r",
      "// prepare\r",
      "// 呼出元で引数として、渡すようにする\r",
      "// this.props.openModal(SetCodepenModal)\r",
      "// containers/Modal.tsx\r",
      "// {Modal && <Modal className=\"m20\" />}\r",
      "type Props = {}\r",
      "class SetModal extends Component<Props> {\r",
      "  handleClick = () => {\r",
      "    window.alert(\"clicked\")\r",
      "  }\r",
      "\r",
      "  render() {\r",
      "    return (\r",
      "      <div className=\"align-center\">\r",
      "        <div>modal</div>\r",
      "        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r",
      "          <div\r",
      "            // onClick={() => {dispatch(closeModal())}} ※事前に dispatch = useDispatch()\r",
      "            onClick={this.handleClick}\r",
      "          >\r",
      "            click me\r",
      "          </div>\r",
      "        </div>\r",
      "      </div>\r",
      "    )\r",
      "  }\r",
      "}\r",
      "const mapStateToProps = (state: any) => ({})\r",
      "\r",
      "const mapDispatchToProps = {}\r",
      "\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(SetModal)\r",
      ""
    ]
  },
  "_reduxAddProps": {
    "prefix": ";reduxAddProps\r",
    "description": "propsに追加\r",
    "body": [
      "\r",
      "import { isExistsUser } from \"../../reducers/signUp\"\r",
      "\r",
      "const mapDispatchToProps = {\r",
      "  isExistsUser\r",
      "}\r",
      "\r",
      "type Props = {\r",
      "  isExistsUser: Function\r",
      "}\r",
      ""
    ]
  },
  "_firebase_set": {
    "prefix": ";refireSet\r",
    "description": "firebaseにデータ追加\r",
    "body": [
      "\r",
      "const tableRef = firebaseDb.collection(\"table\")\r",
      "tableRef.doc(\"data1\").set({})\r",
      ""
    ]
  },
  "_firebase_get": {
    "prefix": ";refireGet\r",
    "description": "firebaseのデータを取得\r",
    "body": [
      "\r",
      "const tableRef = firebaseDb.collection(\"table\")\r",
      "tableRef.get().then(ss => {\r",
      "  ss.forEach(doc => {\r",
      "    console.log(doc.id, \"=>\", doc.data())\r",
      "  })\r",
      "})\r",
      "// 配列のまま返却する場合\r",
      "tableRef.get().then(ss => {\r",
      "  console.log(ss.docs.map(e => e.data()))\r",
      "  //return ss.docs.map(e => e.data())\r",
      "})\r",
      ""
    ]
  },
  "_jsarray_max": {
    "prefix": ";jsarrayMax\r",
    "description": "jsMax値\r",
    "body": [
      "\r",
      ";[...Array(10)].map((e, i) => i).reduce((p, r) => Math.max(p, r))\r",
      ""
    ]
  },
  "_reactConstComp": {
    "prefix": ";reConstComp\r",
    "description": "単純なconstXXX=COMP\r",
    "body": [
      "\r",
      "const Component1 = (props: any) => (\r",
      "  <>\r",
      "    <div>aaa</div>\r",
      "  </>\r",
      ")\r",
      ""
    ]
  },
  "_rstyle_Linkを全体に": {
    "prefix": "_rstyle_Linkを全体に\r",
    "description": "",
    "body": [
      "\r",
      ";<div style={{ position: \"relative\" }}>\r",
      "  <a\r",
      "    style={{\r",
      "      position: \"absolute\",\r",
      "      top: 0,\r",
      "      left: 0,\r",
      "      height: \"100%\",\r",
      "      width: \"100%\"\r",
      "    }}\r",
      "  />\r",
      "  >\r",
      "</div>\r",
      ""
    ]
  },
  "_styledCmp_styled": {
    "prefix": ";styledCmp_styled\r",
    "description": "styled\r",
    "body": [
      "\r",
      "const VerticalBar = styled.div`\r",
      "  position: absolute;\r",
      "`\r",
      ""
    ]
  },
  "_styledCmp_styledProps": {
    "prefix": ";styledCmp_styledProps\r",
    "description": "styledProps\r",
    "body": [
      "\r",
      "const TransformScaleButton = styled.button<{ isValid?: boolean }>`\r",
      "  ${({ isValid }) =>\r",
      "    !isValid &&\r",
      "    css`\r",
      "      transition-duration: 0.3s;\r",
      "      &:hover {\r",
      "        transform: scale(1.2);\r",
      "        transition-duration: 0.3s;\r",
      "      }\r",
      "    `}\r",
      "`\r",
      "// これもOK objectで指定するイメージ\r",
      "// const PropsBox = styled.div(({bg}:any) => ({background: bg,})\r",
      ""
    ]
  },
  "_styledCmp_styledProps_MyCmp": {
    "prefix": ";styledCmp_styledProps_MyCmp\r",
    "description": "styledProps(My)\r",
    "body": [
      "\r",
      "const OperationButton = styled(TransformScaleButton)<{ isInvalid?: boolean }>`\r",
      "  border-radius: 15px 0 0 15px;\r",
      "  background-color: #fcaa00;\r",
      "  height: 3rem;\r",
      "`\r",
      ""
    ]
  },
  "_sytledCmp_styled_MyCmp": {
    "prefix": ";styledCmp_styled_MyCmp",
    "body": "const VerticalBar = styled.div`\r\n  position: absolute;\r\n`\r\n",
    "description": "styled"
  },
  "_styledCmp_wrapToChange": {
    "prefix": ";styledCmp_wrapToChange",
    "body": "export const TransformScaleDivButton = styled(TransformScaleButton.withComponent('div'))`\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n",
    "description": "btn→btn"
  },
  ";rercc_after": {
    "prefix": ";rercc_after",
    "description": "rcc後,state,handler作成",
    "body": [
      "// #region state",
      "state: any = {",
      "  x1: ''",
      "}",
      "// #endregion",
      "",
      "// #region eventhandler",
      "handleSubmit = (e: any)=> {",
      "  e.preventDefault()",
      "}",
      "// #endregion",
      "",
      "// #region render",
      "render() {",
      "  return (",
      "    <div>",
      "      ",
      "    </div>",
      "  )",
      "}",
      "// #endregion",
      ""
    ]
  },
  ";rehandler": {
    "prefix": ";rehandler",
    "description": "handler",
    "body": [
      "handleSubmit = (e: any)=> {",
      "  e.preventDefault()",
      "}"
    ]
  },
  ";rehandler_args": {
    "prefix": ";rehandler_args",
    "description": "引数付きhandler",
    "body": [
      "// onClick={(e)=>this.handleClickGo(e, id)}",
      "handleClickGo = (e: any, id: number) => {",
      "  e.preventDefault();",
      "}"
    ]
  },
  ";retags_form": {
    "prefix": ";retags_form",
    "body": "const { x1 } = this.state\n// <form style={{ display: 'flex', flexDirection: 'column' }}>\n<form onSubmit={this.handleOnSubmit}>\n  <label htmlFor=\"name\">ユーザ名</label>\n  <input\n    id=\"name\" type=\"text\" value={x1}\n    placeholder=\"handle name\"\n    onChange={this.handleChangeName}\n    autoFocus\n    readOnly\n  />\n  <input type=\"button\" value=\"Add\"\n    onClick={this.handleClickAdd}/>\n</form>\n \n  // #region eventhandler\n  handleSubmit = (e: any)=> {\n    e.preventDefault()\n    this.handleClickAdd(e)\n  }\n  handleChangeName = (e: any) => {\n    e.preventDefault()\n    this.setState({ x1: e.target?.value })\n  }\n  handleClickAdd = (e: any) => {\n    e.preventDefault();\n  }\n  // #endregion",
    "description": "form作成"
  },
  ";rercc_after_region": {
    "prefix": ";rercc_after_region",
    "body": "// #region state\n// #endregion\n\n// #region eventhandler\n// #endregion\n\n// #region render\n// #endregion",
    "description": "rcc後,regionのみ"
  },
  ";restate": {
    "prefix": ";restate",
    "body": "state: any = {\n  x1: '',\n}",
    "description": "state"
  },
  ";reref": {
    "prefix": ";reref",
    "body": "// 1/2 constructorに記述\nthis.x1Ref = React.createRef()\n// 2/2 stateの下\nx1Ref: any\n// 使用例\nthis.x1Ref.current.focus()",
    "description": "ref作成e.g.フォーカス制御"
  },
  ";recontext": {
    "prefix": ";recontext",
    "body": "// 1/2 親側\nexport const XContext = createContext([{}]);\n// <XContext.Provider value={this.state.x1}>\n// ※valueで[x1, ()=>this.setState({x1})]として配列で更新メソッドを渡せる\n// 2/2 子側\nimport {XContext} from './Home.tsx'\nconst todo = useContext(XContext)\n// const [x1, setX1] = useContext(XContext)",
    "description": "context"
  },
  ";recreVarReducer_1_index": {
    "prefix": ";recreateVariantReducer_1_reducer",
    "description": "createVariantReducerをimport",
    "body": [
      "// 準備",
      "// code ./src/utils/createVariantReducer.ts",
      "import createVariantReducer from '../utils/createVariantReducer'",
      "const reducers = {",
      "  page: createVariantReducer('page'),",
      "  selectedData: createVariantReducer('selectedData', { isPrivate: false }),",
      "}"
    ]
  },
	";rercc_after_type_props": {
		"prefix": ";rercc_after_type_props",
		"body": "type Props = {\n  openModal: Function\n}\n\n// export class XPage extends Component {\nclass XPage extends Component<Props> {\n}",
		"description": "rcc後,<Props>を付与"
	},
	";reCVreducer_help": {
		"prefix": ";reCVreducer_help",
		"body": "// 1. reducers/index.tsに汎用reducerをcombine\n// 準備\n// cp ../_util_files/boilerplates/createVariantReducer.ts ./src/utilscreateVariantReducer.ts\nimport createVariantReducer from '../utils/createVariantReducer'\nconst reducers = {\n  page: createVariantReducer('page'),\n  selectedData: createVariantReducer('selectedData', { isPrivate: false }),\n}\n// 2. utils/createVariantReducer.ts作成\n\n// 3. 各pageでcreateVariantReducerをimportして使用する\nimport { saveToStore } from '../../utils/createVariantReducer'\ntype Props = { saveToStore: Function }\nconst PageClassFunc = ({ page, saveToStore }: Props) => {}\n// or\nclass PageClass extends Component<Props> {}\nconst mapDispatchToProps = { saveToStore, }\nconst mapStateToProps = (state: any) => ({ page: state.page, })\n// 各箇所\n// const {x1} = this.props.page\n// this.props.saveToStore('page', 'x1', x1)\n\n// キー\n// ;reCVreducer_1_reducers_index\n// ;reCVreducer_2_import\n// ;reCVreducer_3_use\n// ;reCVreducer_help\n",
		"description": "createVariantReducerのhelp"
	},
	";reCVreducer_1_reducers_index": {
		"prefix": ";reCVreducer_1_reducers_index",
		"body": "// 準備\n// cp ../_util_files/boilerplates/createVariantReducer.ts ./src/utilscreateVariantReducer.ts\nimport createVariantReducer from '../utils/createVariantReducer'\nconst reducers = {\n  page: createVariantReducer('page'),\n  selectedData: createVariantReducer('selectedData', { isPrivate: false }),\n}",
		"description": "reducers/index.tsに汎用reducerをcombine"
	},
	";reCVreducer_2_import": {
		"prefix": ";reCVreducer_2_import",
		"body": "import { saveToStore } from '../../utils/createVariantReducer'\ntype Props = { saveToStore: Function }\nconst PageClassFunc = ({ page, saveToStore }: Props) => {}\n// or\nclass PageClass extends Component<Props> {}\nconst mapDispatchToProps = { saveToStore, }\nconst mapStateToProps = (state: any) => ({ page: state.page, })",
		"description": "createVariantReducerをimport"
	},
	";reCVreducer_3_use": {
		"prefix": ";reCVreducer_3_use",
		"body": "const {x1} = this.props.page\nthis.props.saveToStore('page', 'x1', x1)",
		"description": "createVariantReducerを使用"
	},
	";rerouter_params": {
		"prefix": ";rerouter_params",
		"body": "// '/phones/:id'から取得\n    const {id} = this.props.match.params",
		"description": "routerでparams変数使用"
	}
}